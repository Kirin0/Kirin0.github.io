{"meta":{"title":"Hexo","subtitle":"","description":"","author":"Kirin0","url":"https://kirino.cf","root":"/"},"pages":[{"title":"category","date":"2020-11-15T07:34:23.322Z","updated":"2020-11-15T07:34:23.322Z","comments":false,"path":"category/index.html","permalink":"https://kirino.cf/category/index.html","excerpt":"","text":""},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"about/index.html","permalink":"https://kirino.cf/about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://kirino.cf/bangumi/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"https://kirino.cf/client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"https://kirino.cf/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"https://kirino.cf/donate/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"https://kirino.cf/lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"https://kirino.cf/links/index.html","excerpt":"","text":""},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"music/index.html","permalink":"https://kirino.cf/music/index.html","excerpt":"","text":""},{"title":"project","date":"2020-11-05T17:26:53.182Z","updated":"2020-11-05T17:26:53.182Z","comments":false,"path":"project/index.html","permalink":"https://kirino.cf/project/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"https://kirino.cf/rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://kirino.cf/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"https://kirino.cf/tags/index.html","excerpt":"","text":""},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"https://kirino.cf/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"}],"posts":[{"title":"Hello World","slug":"hello-world","date":"2020-11-05T13:48:52.762Z","updated":"2020-11-26T15:32:22.911Z","comments":true,"path":"2020/11/05/hello-world/","link":"","permalink":"https://kirino.cf/2020/11/05/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"教程","slug":"教程","permalink":"https://kirino.cf/categories/%E6%95%99%E7%A8%8B/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"}]},{"title":"live2d","slug":"live2d","date":"2020-10-27T16:06:52.000Z","updated":"2020-11-26T15:33:28.204Z","comments":true,"path":"2020/10/28/live2d/","link":"","permalink":"https://kirino.cf/2020/10/28/live2d/","excerpt":"","text":"前言之前搞网页 Live2d 模型的时候在网上找了很多文章，但大部分都只支持moc格式的模型，不支持moc3格式的模型。 如果你的模型是moc格式，请参考给网页添加一个 Live2D 看板娘（前端） 使用方法在标签内添加如下内容： &lt;!-- 用于存放Live2d的元素，可自定义 --> &lt;div class=\"Canvas\" style=\"position: fixed; right: 10px; bottom: 10px;z-index: 99999999\" id=\"L2dCanvas\">&lt;/div> 在之前添加以下内容： &lt;!------ 位置可自定义 ------> &lt;div class=\"Canvas\" style=\"position: fixed; right: 10px; bottom: 10px;z-index: 99999999\" id=\"L2dCanvas\">&lt;/div> &lt;!------ 依赖 JS ------> &lt;!---- 可选 ----> &lt;!-- 兼容低版本浏览器 --> &lt;script src=\"https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js\"> &lt;/script> &lt;!-- 音频播放兼容 --> &lt;script src=\"https://cdn.jsdelivr.net/npm/howler@2.1.3/dist/howler.min.js\">&lt;/script> &lt;!---- 必需 ----> &lt;script src=\"https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js\">&lt;/script> &lt;script src=\"https://cdn.jsdelivr.net/npm/pixi.js@4.6.1/dist/pixi.min.js\">&lt;/script> &lt;!-- live2dv3.js --> &lt;script src=\"https://cdn.jsdelivr.net/npm/live2dv3@1.2.2/live2dv3.min.js\">&lt;/script> &lt;!------ 加载Live2d模型 ------> &lt;script> window.onload = () => &#123; new l2dViewer(&#123; el: document.getElementById('L2dCanvas'), // 要添加Live2d的元素, 支持dom选择器和jq选择器 basePath: 'https://cdn.jsdelivr.net/gh/HCLonely/Live2dV3/assets', // 模型根目录 modelName: 'biaoqiang_3', // 模型名称 sounds: [ // 触摸播放声音 'sounds/demo.mp3', // 相对路径是相对于模型文件夹 'https://cdn.jsdelivr.net/npm/live2dv3@latest/assets/biaoqiang_3/sounds/demo.mp3' // 也可以是网址 ] &#125;) &#125; &lt;/script>","categories":[{"name":"技术","slug":"技术","permalink":"https://kirino.cf/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"},{"name":"live2d","slug":"live2d","permalink":"https://kirino.cf/tags/live2d/"}]},{"title":"pic","slug":"pic","date":"2020-10-26T04:43:41.000Z","updated":"2020-11-26T15:33:34.711Z","comments":true,"path":"2020/10/26/pic/","link":"","permalink":"https://kirino.cf/2020/10/26/pic/","excerpt":"","text":"前言生活中的常用图床： SM.MS：运营五年多了，也变得越来越慢了，有时候会出现404或者301； Imgur 等国外图床：国内访问速度太慢，随时有被墙的风险,虽然被墙很多次了 大厂储存服务：知名的有腾讯云COS、阿里云OSS、又拍云等国内知名厂商(需要实名认证与备案，而且还需要花费大价钱) GitHub 图床：免费，但是国内访问速度慢（不过没关系，利用 jsDelivr 提供的免费的 CDN 加速 速度足够了，那么这个就是今天本文章的主题啦 ）创建Github仓库 登录/注册 GitHub 新建一个仓库，填写好仓库名 仓库描述 将权限设置成 public 根据需求选择是否为仓库初始化一个 README.md 描述文件生成Access token 1.点击用户头像 -&gt; 选择设置2.点击 Developer settings3.点击 Personal access tokens 和 Generate new token4.填写 Token 描述，勾选 repo ，然后点击 Generate token 生成一个 Token5.获取 Token 密钥 注意这个 Token 只会显示一次，自己先保存下来，或者等后面配置好 PicGo 后再关闭此网页。 配置 PicGo 并使用 jsdelivr 作为 CDN 加速前往下载PicGo（点击下载），安装好后开始配置图床。 1.设定仓库名：按照 用户名/图床仓库名 的格式填写2.设定分支名：master3.设定 Token：粘贴之前生成的 Token4.指定存储路径：填写想要储存的路径，如 img/，这样就会在仓库下创建一个名为 img 的文件夹，图片将会储存在此文件夹中5.设定自定义域名：它的的作用是，在图片上传后，PicGo 会按照自定义域名+上传的图片名的方式生成访问链接，放到粘贴板上，因为我们要使用jsDelivr 加速访问，所以可以设置为https://cdn.jsdelivr.net/gh/用户名/图床仓库名 使用 Imagine 进行有损图片压缩通常情况下，图片大小都是超过 200KB 的，所以网页加载的时候会特别慢，一般我们会对图片进行压缩，并且转换成 webp 格式，这里我推荐Imagine（点击下载） 支持全平台。 使用免费图床下面就可以愉快的图床了，选择需要的图片和格式，复制链接，粘贴到 markdown 中，就完成了。此外 PicGo 还有相册功能，可以对已上传的图片进行删除，修改链接等快捷操作，PicGo 还可以生成不同格式的链接、支持批量上传、快捷键上传、自定义链接格式、上传前重命名等，更多功能自己去探索吧！","categories":[{"name":"技术","slug":"技术","permalink":"https://kirino.cf/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://kirino.cf/tags/jsdelivr/"},{"name":"PicGo","slug":"PicGo","permalink":"https://kirino.cf/tags/PicGo/"}]},{"title":"jsdelivr","slug":"jsdelivr","date":"2020-10-25T15:50:58.000Z","updated":"2020-11-26T15:33:21.548Z","comments":true,"path":"2020/10/25/jsdelivr/","link":"","permalink":"https://kirino.cf/2020/10/25/jsdelivr/","excerpt":"","text":"前言由于各种因素，站长对GitHub的速度十分不满意。使用国内对象储存需要收费和备案，对非盈利性站点简直是雪上加霜。所以推荐jsDelivr，它是一款免费的CDN！目前GitHub仓库容量是没有上限的！不过官方推荐在1G以内！仓库单个文件大于50M会收到警告，大于100M会被拒绝！jsDelivr仅能针对50M以下的文件CDN加速！ Releases将需要加速的文件上传至GitHub仓库，通过Releases创建版本号。步骤：进入对应GitHub仓库，点击tags，点击Releases，点击Draft a new release在Tag version中输入版本号，输入标题，直接点击Publish release即可成功发布。具体可查看官方说明：https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/managing-releases-in-a-repository使用jsDelivr发布成功后，直接使用jsDelivr即可访问。带版本号： https://cdn.jsdelivr.net/gh/user/repo@version/file 不带版本号： https://cdn.jsdelivr.net/gh/user/repo/file 其中：user：GitHub用户名repo：仓库名version：版本号file：文件名例如： https://cdn.jsdelivr.net/gh/diysay/Blog_CDN_2@0.01/diysay.png diysay：GitHub用户名Blog_CDN_2：仓库名0.01：版本号diysay.png：文件名 后话使用版本号：不管你是删除文件还是修改文件，内容就是那个发布版本的内容。不使用版本号：没有版本的限制，需要频繁更新推荐使用","categories":[{"name":"技术","slug":"技术","permalink":"https://kirino.cf/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://kirino.cf/tags/jsdelivr/"}]},{"title":"使用hexo+github搭建免费个人博客详细教程","slug":"hexo","date":"2020-10-23T08:04:04.000Z","updated":"2020-11-26T15:33:14.769Z","comments":true,"path":"2020/10/23/hexo/","link":"","permalink":"https://kirino.cf/2020/10/23/hexo/","excerpt":"","text":"前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等； 准备工作在开始一切之前，你必须已经： 1.有一个github账号，没有的话去注册一个；2.安装了node.js、npm，并了解相关基础知识；3.安装了git for windows（或者其它git客户端） 本文所使用的环境： Windows8.1 &#x6e;&#x6f;&#100;&#101;&#46;&#106;&#115;&#64;&#x35;&#x2e;&#x35;&#46;&#x30; &#103;&#x69;&#116;&#64;&#49;&#46;&#57;&#46;&#50; &#x68;&#x65;&#x78;&#111;&#x40;&#x33;&#x2e;&#50;&#x2e;&#x32; 搭建github博客创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 绑定域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me 如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me 如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 $ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 $ ssh-keygen -t rsa -C \"邮件地址\" 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 测试是否成功$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You've successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： $ git config --global user.name \"liuxianan\"// 你的github用户名，非昵称 $ git config --global user.email \"xxx@qq.com\"// 填写你的github注册邮箱 使用hexo写博客安装$ npm install -g hexo 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 $ cd /f/Workspaces/hexo/ $ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： $ hexo g # 生成 $ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 此时直接执行hexo d的话一般会报如下错误： Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件： npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 写博客定位到我们的hexo根目录，执行命令： hexo new 'my-first-blog' hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： title: postName #文章页面上的显示名称，一般是中文 date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改 categories: 默认分类 #分类 tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格 description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面 常用hexo命令常见命令 hexo new \"postName\" #新建文章 hexo new page \"pageName\" #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server） hexo deploy #部署到GitHub hexo help # 查看帮助 hexo version #查看Hexo的版本 缩写： hexo n == hexo new hexo g == hexo generate hexo s == hexo server hexo d == hexo deploy 组合命令： hexo s -g #生成并本地预览 hexo d -g #生成并上传","categories":[{"name":"技术","slug":"技术","permalink":"https://kirino.cf/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"}]}],"categories":[{"name":"教程","slug":"教程","permalink":"https://kirino.cf/categories/%E6%95%99%E7%A8%8B/"},{"name":"技术","slug":"技术","permalink":"https://kirino.cf/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://kirino.cf/tags/Hexo/"},{"name":"live2d","slug":"live2d","permalink":"https://kirino.cf/tags/live2d/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://kirino.cf/tags/jsdelivr/"},{"name":"PicGo","slug":"PicGo","permalink":"https://kirino.cf/tags/PicGo/"}]}